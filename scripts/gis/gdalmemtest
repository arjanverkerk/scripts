#!/usr/bin/python
# -*- coding: utf-8 -*-

from __future__ import print_function
from __future__ import unicode_literals
from __future__ import absolute_import
from __future__ import division

import argparse

import numpy as np
import gdal
import ctypes
import time

from osgeo import gdal_array

def get_parser():
    """ Return argument parser. """
    parser = argparse.ArgumentParser(
        description=""
    )
    # Add arguments here.
    return parser


def command():
    """ 
    Fun, this works, but call FlushCache whenever necessary.
    """
    ar = np.ones((100, 100, 625))

    # Read-write datasets
    datapointer = ar.ctypes.data
    bands, lines, pixels = ar.shape
    datatype = gdal_array.NumericTypeCodeToGDALTypeCode(ar.dtype.type)
    bandoffset, lineoffset, pixeloffset = ar.strides

    dataset_name_template = (
        'MEM:::'
        'DATAPOINTER={datapointer},'
        'PIXELS={pixels},'
        'LINES={lines},'
        'BANDS={bands},'
        'DATATYPE={datatype},'
        'PIXELOFFSET={pixeloffset},'
        'LINEOFFSET={lineoffset},'
        'BANDOFFSET={bandoffset}'
    )
    dataset_name = dataset_name_template.format(
        datapointer=datapointer,
        pixels=pixels,
        lines=lines,
        bands=bands,
        datatype=datatype,
        pixeloffset=pixeloffset,
        lineoffset=lineoffset,
        bandoffset=bandoffset,
    )
    ds1 = gdal.Open(dataset_name, gdal.GA_Update)

    # Read-only datasets:
    ds2 = gdal_array.OpenArray(ar)

    print(ds2.ReadAsArray())
    ar[:] = 2
    print(ds2.ReadAsArray())
    ds2.FlushCache()
    print(ds2.ReadAsArray())

    print('...')

    print(ds1.ReadAsArray())
    ds1.GetRasterBand(1).Fill(3)
    print(ds1.ReadAsArray())
    print(ar)
    ds1.FlushCache()
    print(ds1.ReadAsArray())

def main():
    """ Call command with args from parser. """
    command(**vars(get_parser().parse_args()))


if __name__ == '__main__':
    exit(main())
