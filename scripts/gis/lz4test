#!/home/arjan/code/scripts/bin/python
# -*- coding: utf-8 -*-

from __future__ import print_function
from __future__ import unicode_literals
from __future__ import absolute_import
from __future__ import division

import argparse
import h5py
import gdal
import lz4
import numpy as np
import os
import shutil
import tempfile
from arjan.monitor import Monitor, TimeMonitor

gdal.UseExceptions()


def get_parser():
    """ Return argument parser. """
    parser = argparse.ArgumentParser(
        description=""
    )
    parser.add_argument('path')
    return parser


def test_asc(dataset):
    """ Write, read and remove aaigrid. """
    tempdir = tempfile.mkdtemp()
    #temppath = os.path.join(tempdir, 'temp.asc')
    temppath = 'temp.asc'
    ascdriver = gdal.GetDriverByName(b'aaigrid')
    memdriver = gdal.GetDriverByName(b'mem')
    mon = Monitor(monitors=[TimeMonitor])
    ascdataset = ascdriver.CreateCopy(
        temppath,
        dataset,
    )
    ascdataset = None
    mon.check('Write asc')
    ascdataset = gdal.Open(temppath)
    memdataset = memdriver.CreateCopy('', ascdataset)
    mon.check('Read asc')
    shutil.rmtree(tempdir)


def test_zip(dataset):
    """ Write, read and remove zipped aaigrid. """
    tempdir = tempfile.mkdtemp()
    #temppath = os.path.join(tempdir, 'temp.asc')
    temppath = '/vsizip/temp.zip/temp.asc'
    ascdriver = gdal.GetDriverByName(b'aaigrid')
    memdriver = gdal.GetDriverByName(b'mem')
    mon = Monitor(monitors=[TimeMonitor])
    ascdataset = ascdriver.CreateCopy(
        temppath,
        dataset,
    )
    ascdataset = None
    mon.check('Write asc')
    ascdataset = gdal.Open(temppath)
    memdataset = memdriver.CreateCopy('', ascdataset)
    mon.check('Read asc')
    shutil.rmtree(tempdir)

def test_tif(dataset):
    """ Write, read and remove tiff. """
    tempdir = tempfile.mkdtemp()
    #temppath = os.path.join(tempdir, 'temp.tif')
    temppath = 'temp.tif'
    tifdriver = gdal.GetDriverByName(b'gtiff')
    memdriver = gdal.GetDriverByName(b'mem')
    mon = Monitor(monitors=[TimeMonitor])
    tifdataset = tifdriver.CreateCopy(
        temppath,
        dataset,
        options=[
            'COMPRESS=DEFLATE',
            'TILED=YES',
            'BLOCKXSIZE=256',
            'BLOCKYSIZE=256',
        ]
    )
    tifdataset = None
    mon.check('Write tif')
    tifdataset = gdal.Open(temppath)
    memdataset = memdriver.CreateCopy('', tifdataset)
    mon.check('Read tif')
    shutil.rmtree(tempdir)


def test_lz4(dataset):
    """ Write, read and remove data as copmressed binary string. """
    tempdir = tempfile.mkdtemp()
    #temppath = os.path.join(tempdir, 'temp.lz4')
    temppath = 'temp.lz4'
    data = dataset.ReadAsArray()
    shape = data.shape
    dtype = data.dtype
    mon = Monitor(monitors=[TimeMonitor])
    with open(temppath, 'w') as zfile:
        zfile.write(lz4.dumps(data.tostring()))
    mon.check('Write lz4')
    with open(temppath) as zfile:
        data = np.fromstring(
            lz4.loads(zfile.read()),
            dtype=dtype,
        ).reshape(shape)
    mon.check('Read lz4')
    shutil.rmtree(tempdir)


def test_h5(dataset):
    """ Test hdf5. """
    tempdir = tempfile.mkdtemp()
    #temppath = os.path.join(tempdir, 'temp.h5')
    temppath = 'temp.h5'
    data = dataset.ReadAsArray()
    shape = data.shape
    dtype = data.dtype
    mon = Monitor(monitors=[TimeMonitor])
    with h5py.File(temppath) as h5:
        h5.create_dataset('test', data=data, 
                          chunks=True, compression='lzf', shuffle=False)
        h5['test'][:] = data
    mon.check('Write h5')
    with h5py.File(temppath) as h5:
        data = h5['test'][...]
    mon.check('Read h5')
    shutil.rmtree(tempdir)


def command(path):
    """ Do something spectacular. """
    aigdataset = gdal.Open(path)
    memdriver = gdal.GetDriverByName(b'mem')
    mon = Monitor(monitors=[TimeMonitor])
    memdataset = memdriver.CreateCopy('', aigdataset)
    mon.check('Read aig')
    
    #test_asc(memdataset)
    #test_zip(memdataset)
    test_tif(memdataset)
    test_lz4(memdataset)
    test_h5(memdataset)


def main():
    """ Call command with args from parser. """
    command(**vars(get_parser().parse_args()))


if __name__ == '__main__':
    exit(main())
